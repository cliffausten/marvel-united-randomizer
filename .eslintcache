[{"/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/index.tsx":"1","/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/serviceWorker.ts":"2","/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/App.tsx":"3","/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/components/StoreProvider/index.tsx":"4","/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/components/StateRouter/index.tsx":"5","/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/stores/RootStore.ts":"6","/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/hooks/useStores.ts":"7","/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/stores/StateStore.ts":"8","/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/stores/ExampleStore.ts":"9","/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/pages/ExamplePage/index.tsx":"10","/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/stores/Store.ts":"11","/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/apis/ExampleApi.ts":"12","/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/apis/ApiCall.ts":"13","/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/Environment.ts":"14","/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/components/ExampleComponent/index.tsx":"15","/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/models/Result.ts":"16"},{"size":430,"mtime":1610033529594,"results":"17","hashOfConfig":"18"},{"size":5201,"mtime":1610033529597,"results":"19","hashOfConfig":"18"},{"size":2600,"mtime":1610033529580,"results":"20","hashOfConfig":"18"},{"size":419,"mtime":1610033984004,"results":"21","hashOfConfig":"18"},{"size":407,"mtime":1610033529587,"results":"22","hashOfConfig":"18"},{"size":429,"mtime":1610034353058,"results":"23","hashOfConfig":"18"},{"size":356,"mtime":1610033529590,"results":"24","hashOfConfig":"18"},{"size":325,"mtime":1610034972022,"results":"25","hashOfConfig":"18"},{"size":887,"mtime":1610033529598,"results":"26","hashOfConfig":"18"},{"size":327,"mtime":1610033529596,"results":"27","hashOfConfig":"18"},{"size":167,"mtime":1610034393519,"results":"28","hashOfConfig":"18"},{"size":333,"mtime":1610033529582,"results":"29","hashOfConfig":"18"},{"size":1190,"mtime":1610033796976,"results":"30","hashOfConfig":"18"},{"size":191,"mtime":1610035691872,"results":"31","hashOfConfig":"18"},{"size":664,"mtime":1610033529585,"results":"32","hashOfConfig":"18"},{"size":82,"mtime":1610033529594,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"j4d35f",{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/index.tsx",[],[],"/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/serviceWorker.ts",["68","69"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/App.tsx",[],"/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/components/StoreProvider/index.tsx",[],"/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/components/StateRouter/index.tsx",[],"/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/stores/RootStore.ts",[],"/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/hooks/useStores.ts",[],"/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/stores/StateStore.ts",[],"/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/stores/ExampleStore.ts",[],"/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/pages/ExamplePage/index.tsx",[],"/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/stores/Store.ts",[],"/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/apis/ExampleApi.ts",[],"/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/apis/ApiCall.ts",[],"/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/Environment.ts",[],"/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/components/ExampleComponent/index.tsx",[],"/Users/Clifford.Austen/git/sandbox/coop_react_boilerplate/src/models/Result.ts",[],{"ruleId":"70","severity":1,"message":"71","line":28,"column":8,"nodeType":"72","messageId":"73","endLine":28,"endColumn":42},{"ruleId":"70","severity":1,"message":"71","line":137,"column":8,"nodeType":"72","messageId":"73","endLine":137,"endColumn":29},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType"]